# This wasn't helpful so I'll drop one of them
fish_data %<>% filter(row_number() != 39)
fish_data <- read_csv("transect_data.csv", col_types = cols(Name = col_factor(),
Site = col_factor(),
Time = col_factor(),
Depth = col_factor(),
Transect = col_factor(),
Species = col_factor()))
str(fish_data)
fish_data %>% distinct(Time, Site, Transect, Depth) %>% summarise(n_trans = n())
# Fix species names
fish_data$Species <- trimws(fish_data$Species) # Remove whitespace
fish_data %<>%
mutate(Species = stringr::str_to_sentence(Species)) %>%  # Species names spelt correctly
filter(!str_detect(Species, " fish"), !str_detect(Species, " spp^"), !str_detect(Species, " spp.")) %>%
mutate_at(vars(Time, Depth), as.factor) # Change Time & Depth to factors
fish_data %>%
select(Time, Site, Depth, Coral_Cover, Rock_Cover, Sand_Cover) %>%
ggpairs(title = "Environmental variables", switch = "y", progress = FALSE)
fish_data %>% distinct(Species)
# The following rows are somehow problematic:
fish_data %>% filter(row_number() == 40 | row_number() == 39)
# The following rows are somehow problematic:
fish_data %>% filter(row_number() == 40 | row_number() == 39)
# Maybe there's some kond of problem with the name, so we'll change it
fish_data[39,9] <- "Zebrasoma xanthurum"
fish_data[40,9] <- "Zebrasoma xanthurum"
# This wasn't helpful so I'll drop one of them
fish_data %<>% filter(row_number() != 39)
com_mtx <- fish_data %>%
select(-count) %>%
spread(key = Species, value = sum, fill = 0)
# Order according to 'Time' and add running transect number
com_mtx %<>% arrange(Time) %>% select(Transect, Name, Site, Time, Depth, 6:ncol(.)) %>%
mutate(Transect = seq(1, length(.$Transect), 1))
# Create abundance matrix
abnd_mtx <- com_mtx %>%
select(-c(Time, Name, Site, Depth, Coral_Cover, Rock_Cover, Sand_Cover)) %>%
column_to_rownames("Transect")
# Create environmental data frame
env_df <- com_mtx %>%
select(Transect, Name, Site, Time, Depth, Coral_Cover, Rock_Cover, Sand_Cover) %>%
column_to_rownames("Transect")
# Histogram of abundances
par(mfrow = c(2,1))
hist(colSums(abnd_mtx), xlab = "Abundance", col = "grey", main = NULL)
hist(log(colSums(abnd_mtx)), xlab = "Abundance (log)", col = "grey", main = NULL)
mtext("Abundance histograms of all species", side = 1, line = -21, outer = TRUE, font = 2)
par(mfrow = c(1,1))
pairs(env_df, cex.labels = 1.5)
GGally::ggpairs(env_df, progress = FALSE,
mapping = aes(colour = Site),
cardinality_threshold = 20)
area_cor <- cor(log(knoll.info$S), log(knoll.info$surf_area))
fish_data <- read_csv("transect_data.csv", col_types = cols(Name = col_factor(),
Site = col_factor(),
Time = col_factor(),
Depth = col_factor(),
Transect = col_factor(),
Species = col_factor()))
# Load libraries
library(pacman)
p_load(dplyr,tidyr,vegan,car,mvabund,ggplot2,lme4,DHARMa,pwr,r2glmm,MuMIn,tidyverse,magrittr, GGally)
# Load functions
source("QM_functions_ofri.R")
pcacircle = function (pca.res)
{
# Draws a circle of equilibrium contribution on a PCA plot
# generated from a vegan analysis.
# vegan uses special constants for its outputs, hence
# the 'const' value below.
p = length(pca.res$CA$eig) # Get the number of components
const = attr(summary(pca.res),"const") # Get the scaling constant from the PCA summary
radius = const * (2/p)^0.5
symbols(0, 0, circles=radius, inches=FALSE, add=TRUE, fg=2)
species = scores(pca.res,scaling=1,display='sp')
# Calculate the arrow lengths
spec.dist = sqrt(species[,1]^2+species[,2]^2)
# Get only the significant species:
sig.spec = spec.dist[spec.dist > radius]
# Sort from highest to lowest and return the sorted values:
return(sort(sig.spec,decreasing=TRUE))
}
fish_data <- read_csv("transect_data.csv", col_types = cols(Name = col_factor(),
Site = col_factor(),
Time = col_factor(),
Depth = col_factor(),
Transect = col_factor(),
Species = col_factor()))
str(fish_data)
fish_data %>% distinct(Time, Site, Transect, Depth) %>% summarise(n_trans = n())
# Fix species names
fish_data$Species <- trimws(fish_data$Species) # Remove whitespace
fish_data %<>%
mutate(Species = stringr::str_to_sentence(Species)) %>%  # Species names spelt correctly
filter(!str_detect(Species, " fish"), !str_detect(Species, " spp^"), !str_detect(Species, " spp.")) %>%
mutate_at(vars(Time, Depth), as.factor) # Change Time & Depth to factors
fish_data %>%
select(Time, Site, Depth, Coral_Cover, Rock_Cover, Sand_Cover) %>%
ggpairs(title = "Environmental variables", switch = "y", progress = FALSE)
fish_data %>% distinct(Species)
# The following rows are somehow problematic:
fish_data %>% filter(row_number() == 40 | row_number() == 39)
# Maybe there's some kond of problem with the name, so we'll change it
fish_data[39,9] <- "Zebrasoma xanthurum"
fish_data[40,9] <- "Zebrasoma xanthurum"
# This wasn't helpful so I'll drop one of them
fish_data %<>% filter(row_number() != 39)
com_mtx <- fish_data %>%
select(-count) %>%
spread(key = Species, value = sum, fill = 0)
# Order according to 'Time' and add running transect number
com_mtx %<>% arrange(Time) %>% select(Transect, Name, Site, Time, Depth, 6:ncol(.)) %>%
mutate(Transect = seq(1, length(.$Transect), 1))
# Create abundance matrix
abnd_mtx <- com_mtx %>%
select(-c(Time, Name, Site, Depth, Coral_Cover, Rock_Cover, Sand_Cover)) %>%
column_to_rownames("Transect")
# Create environmental data frame
env_df <- com_mtx %>%
select(Transect, Name, Site, Time, Depth, Coral_Cover, Rock_Cover, Sand_Cover) %>%
column_to_rownames("Transect")
# Load libraries
library(pacman)
p_load(dplyr,tidyr,vegan,car,mvabund,ggplot2,lme4,DHARMa,pwr,r2glmm,MuMIn,tidyverse,magrittr, GGally)
# Load functions
source("QM_functions_ofri.R")
pcacircle = function (pca.res)
{
# Draws a circle of equilibrium contribution on a PCA plot
# generated from a vegan analysis.
# vegan uses special constants for its outputs, hence
# the 'const' value below.
p = length(pca.res$CA$eig) # Get the number of components
const = attr(summary(pca.res),"const") # Get the scaling constant from the PCA summary
radius = const * (2/p)^0.5
symbols(0, 0, circles=radius, inches=FALSE, add=TRUE, fg=2)
species = scores(pca.res,scaling=1,display='sp')
# Calculate the arrow lengths
spec.dist = sqrt(species[,1]^2+species[,2]^2)
# Get only the significant species:
sig.spec = spec.dist[spec.dist > radius]
# Sort from highest to lowest and return the sorted values:
return(sort(sig.spec,decreasing=TRUE))
}
fish_data <- read_csv("transect_data.csv", col_types = cols(Name = col_factor(),
Site = col_factor(),
Time = col_factor(),
Depth = col_factor(),
Transect = col_factor(),
Species = col_factor()))
str(fish_data)
fish_data %>% distinct(Time, Site, Transect, Depth) %>% summarise(n_trans = n())
# Fix species names
fish_data$Species <- trimws(fish_data$Species) # Remove whitespace
fish_data %<>%
mutate(Species = stringr::str_to_sentence(Species)) %>%  # Species names spelt correctly
filter(!str_detect(Species, " fish"), !str_detect(Species, " spp^"), !str_detect(Species, " spp.")) %>%
mutate_at(vars(Time, Depth), as.factor) # Change Time & Depth to factors
# Fix species names
fish_data$Species <- trimws(fish_data$Species) # Remove whitespace
fish_data %<>%
mutate(Species = stringr::str_to_sentence(Species)) %>%  # Species names spelt correctly
filter(!str_detect(Species, " fish"), !str_detect(Species, " spp^"), !str_detect(Species, " spp.")) %>%
mutate_at(vars(Time, Depth), as.factor) # Change Time & Depth to factors
fish_data %>%
select(Time, Site, Depth, Coral_Cover, Rock_Cover, Sand_Cover) %>%
ggpairs(title = "Environmental variables", switch = "y", progress = FALSE)
fish_data %>% distinct(Species)
# The following rows are somehow problematic:
fish_data %>% filter(row_number() == 40 | row_number() == 39)
# Maybe there's some kond of problem with the name, so we'll change it
fish_data[39,9] <- "Zebrasoma xanthurum"
fish_data[40,9] <- "Zebrasoma xanthurum"
# This wasn't helpful so I'll drop one of them
fish_data %<>% filter(row_number() != 39)
com_mtx <- fish_data %>%
select(-count) %>%
spread(key = Species, value = sum, fill = 0)
# Order according to 'Time' and add running transect number
com_mtx %<>% arrange(Time) %>% select(Transect, Name, Site, Time, Depth, 6:ncol(.)) %>%
mutate(Transect = seq(1, length(.$Transect), 1))
# Create abundance matrix
abnd_mtx <- com_mtx %>%
select(-c(Time, Name, Site, Depth, Coral_Cover, Rock_Cover, Sand_Cover)) %>%
column_to_rownames("Transect")
# Create environmental data frame
env_df <- com_mtx %>%
select(Transect, Name, Site, Time, Depth, Coral_Cover, Rock_Cover, Sand_Cover) %>%
column_to_rownames("Transect")
# Histogram of abundances
par(mfrow = c(2,1))
hist(colSums(abnd_mtx), xlab = "Abundance", col = "grey", main = NULL)
hist(log(colSums(abnd_mtx)), xlab = "Abundance (log)", col = "grey", main = NULL)
mtext("Abundance histograms of all species", side = 1, line = -21, outer = TRUE, font = 2)
par(mfrow = c(1,1))
pairs(env_df, cex.labels = 1.5)
GGally::ggpairs(env_df, progress = FALSE,
mapping = aes(colour = Site),
cardinality_threshold = 20)
hel_data <- decostand(abnd_mtx, method = "hellinger")
stress_test(hel_data, 2, 5, plot_stress = FALSE)
hel_mds <- metaMDS(hel_data, distance = 'bray', k = 3)
# Plot the MDs results
plot(hel_mds, type = "n", display = c('sites','species'), main = paste("nMDS - Bray on Hellinger transformed data. Stress =", round(hel_mds$stress, 3)))
text(hel_mds, display = 'species', col = "grey") # plot each species
text(hel_mds, display = "sites", labels = env_df$Depth, col = as.numeric(env_df$Depth)) # plot the habitats
# Plot the shepard plot:
stressplot(hel_mds, main = "Shepard plot")
# Plot the MDs results
plot(hel_mds, type = "n", display = c('sites','species'), main = paste("nMDS on Hellinger transformed data. Stress =", round(hel_mds$stress, 3)))
text(hel_mds, display = 'species', col = "grey") # plot each species
text(hel_mds, display = "sites", labels = env_df$Depth, col = as.numeric(env_df$Depth)) # plot the habitats
png("nMDS1.png", res = 150, units = "dpi", type = "png")
png("nMDS1.png", res = 150, units = "px", type = "png")
png("nMDS1.png", res = 150, units = "px")
plot(hel_mds, type = "n", display = c('sites','species'), main = paste("nMDS on Hellinger transformed data. Stress =", round(hel_mds$stress, 3)))
text(hel_mds, display = 'species', col = "grey") # plot each species
text(hel_mds, display = "sites", labels = env_df$Depth, col = as.numeric(env_df$Depth)) # plot the habitats
div.off()
dev.off()
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title(paste("NMDS/Bray - Hellinger transformed. Stress =", round(hel_mds$stress, 5))) # display the stress on the plot title
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordihull(hel_mds, env_df$Depth) # Draw 'convex hulls' around the different depths
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title(paste("NMDS/Bray - Hellinger transformed. Stress =", round(hel_mds$stress, 5))) # display the stress on the plot title
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordihull(hel_mds, env_df$Depth, col = as.numeric(env_df$Depth), alpha = 0.6) # Draw 'convex hulls' around the different depths
ordihull(hel_mds, env_df$Depth, col = c("red", "green", "black", "blue")) # Draw 'convex hulls' around the different depths
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title(paste("NMDS/Bray - Hellinger transformed. Stress =", round(hel_mds$stress, 5))) # display the stress on the plot title
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordihull(hel_mds, env_df$Depth, col = c("red", "green", "black", "blue")) # Draw 'convex hulls' around the different depths
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title(paste("NMDS/Bray - Hellinger transformed. Stress =", round(hel_mds$stress, 5))) # display the stress on the plot title
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordihull(hel_mds, env_df$Depth, col = c("black", "red", "green", "blue")) # Draw 'convex hulls' around the different depths
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title(paste("NMDS/Bray - Hellinger transformed. Stress =", round(hel_mds$stress, 3))) # display the stress on the plot title
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordihull(hel_mds, env_df$Depth, col = c("black", "red", "green", "blue")) # Draw 'convex hulls' around the different depths
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title(paste("nMDS - Hellinger transformed. Stress =", round(hel_mds$stress, 3))) # display the stress on the plot title
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordihull(hel_mds, env_df$Depth, col = c("black", "red", "green", "blue")) # Draw 'convex hulls' around the different depths
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title(paste("NMDS/Bray - Hellinger transformed. Stress =", round(hel_mds$stress, 5))) # display the stress on the plot title
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordisurf(hel_mds, env_df$Coral_Cover, add = TRUE, col = 'purple')
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title(paste("NMDS/Bray - Hellinger transformed. Stress =", round(hel_mds$stress, 5))) # display the stress on the plot title
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordisurf(hel_mds, env_df$Rock_Cover, add = TRUE, col = 'purple')
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title(paste("NMDS/Bray - Hellinger transformed. Stress =", round(hel_mds$stress, 5))) # display the stress on the plot title
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordisurf(hel_mds, env_df$Sand_Cover, add = TRUE, col = 'purple')
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title(paste("NMDS/Bray - Hellinger transformed. Stress =", round(hel_mds$stress, 3))) # display the stress on the plot title
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordisurf(hel_mds, env_df$Coral_Cover, add = TRUE, col = 'purple')
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title("Coral coverage")text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title("Coral coverage")text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title("Coral coverage")
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordisurf(hel_mds, env_df$Coral_Cover, add = TRUE, col = 'purple')
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title("Rock coverage")text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title("Coral coverage")
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordisurf(hel_mds, env_df$Coral_Cover, add = TRUE, col = 'purple')
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title("Rock coverage")
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordisurf(hel_mds, env_df$Rock_Cover, add = TRUE, col = 'purple')
plot(hel_mds, display = 'sites', type = 'n') # Prepare the plot area
title("Sand coverage")
text(hel_mds, display = 'sites', labels = env_df$Depth, cex = 0.7, col = as.numeric(env_df$Depth)) # Plot the habitat labels
text(hel_mds, display = 'species', col = "cornsilk3", cex = 1)
ordisurf(hel_mds, env_df$Sand_Cover, add = TRUE, col = 'purple')
envfit(hel_mds, env_df[, -1])
abnd_mtx %>% is.na() %>% which()
nrow(abnd_mtx) > ncol(abnd_mtx)
nrow(abnd_mtx) / ncol(abnd_mtx)
# box plot without outliers
boxplot(env_df, las = 2)
pairs(env_df)
GGally::ggpairs(env_df)
env_df
GGally::ggpairs(data = env_df,
columns = c("Coral_Cover", "Rock_Cover", "Sand_Cover"))
GGally::ggpairs(data = env_df,
columns = c("Coral_Cover", "Rock_Cover", "Sand_Cover"),
mapping = aes(colour = Site))
GGally::ggpairs(data = env_df,
columns = c("Coral_Cover", "Rock_Cover", "Sand_Cover"),
mapping = aes(colour = Depth))
env_df_ord <- env_df
levels(env_df_ord$Depth) <- c("2", "5", "10", "20")
GGally::ggpairs(data = env_df_ord,
columns = c("Coral_Cover", "Rock_Cover", "Sand_Cover"),
mapping = aes(colour = Depth))
# box plot without outliers
boxplot(env_df_ord, las = 2)
# box plot without outliers
boxplot(env_df_ord[,5:8], las = 2)
# box plot without outliers
boxplot(env_df_ord[,5:7], las = 2)
# box plot without outliers
boxplot(env_df_ord[,5:7], fill = identity)
# box plot without outliers
boxplot(env_df_ord[,5:7], fill = "grey")
# box plot without outliers
boxplot(env_df_ord[,5:7])
outliers <- boxplot(env_df_ord[,5:7])$out
which(env_df_ord %in% outliers)
outliers_coral <- boxplot(env_df_ord[,5])$out
outliers_coral <- boxplot(env_df_ord[,5])$out
outliers_rock <- boxplot(env_df_ord[,6])$out
outliers_sand <- boxplot(env_df_ord[,7])$out
which(env_df_ord %in% outliers_sand)
outliers_sand
outliers_coral
outliers_rock
fish_data
boxplot(fish_data[,6:8])
outliers_coral <- boxplot(fish_data[,6])$out
outliers_rock <- boxplot(fish_data[,7])$out
outliers_sand <- boxplot(fish_data[,8])$out
which(fish_data %in% outliers_sand)
pca_data <- hel_data
pca_cov <- rda(pca_data, scale = FALSE)
biplot(pca_cov, display = 'species', col = "azure4")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover))
summary(pca_cov, display = "sp")
scores(pca_cov, display = "species")
pca_cov <- rda(pca_data, scale = FALSE)
biplot(pca_cov, display = 'species', col = "azure4")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+1))
summary(pca_cov, display = "sp")
pca_cov <- rda(pca_data, scale = FALSE)
biplot(pca_cov, display = 'species', col = "azure4")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+1))
pca_cov <- rda(pca_data, scale = FALSE)
biplot(pca_cov, display = 'species', col = "azure4")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+2))
pca_cov <- rda(pca_data, scale = FALSE)
biplot(pca_cov, display = 'species', col = "azure4")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+3))
pca_cov <- rda(pca_data, scale = FALSE)
biplot(pca_cov, display = 'species', col = "azure4")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+4))
pca_cov <- rda(pca_data, scale = FALSE)
biplot(pca_cov, display = 'species', col = "blanchedalmond")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+4))
biplot(pca_cov, display = 'species', col = "bisque")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+4))
biplot(pca_cov, display = 'species', col = "azure1")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+4))
biplot(pca_cov, display = 'species', col = "azure3")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+4))
biplot(pca_cov, display = 'species', col = "azure3")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+5))
biplot(pca_cov, display = 'species', col = "azure3")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+6))
biplot(pca_cov, display = 'species', col = "azure3")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+7))
biplot(pca_cov, display = 'species', col = "azure3")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover+8))
biplot(pca_cov, display = 'species', col = "azure3")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover))
biplot(pca_cov, display = 'species', col = "darkolivegreen2")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover))
eigval_test(pca_cov)
summary(pca_cov, display = "sp")
broom::tidy(pca_cov)
summary(pca_cov, display = "sp")
summary(pca_cov, display = "sp") %>%
str()
summary(pca_cov, display = "sp")$cont$importance
summary(pca_cov, display = "sp")$cont$importance %>%
broom::tidy()
summary(pca_cov, display = "sp")$cont$importance %>%
write.table("pca.csv")
summary(pca_cov, display = "sp")$cont$importance %>%
write_csv("pca.csv")
summary(pca_cov, display = "sp")$cont$importance %>%
as_tibbel() %>%
write_csv("pca.csv")
summary(pca_cov, display = "sp")$cont$importance %>%
as_tibble() %>%
write_csv("pca.csv")
summary(pca_cov, display = "sp")$cont$importance %>%
as_data_frame() %>%
write_csv("pca.csv")
summary(pca_cov, display = "sp")$cont$importance %>%
as.data.frame() %>%
write_csv("pca.csv")
summary(pca_cov, display = "sp")$cont$importance %>%
as.data.frame() %>%
write_csv("pca.csv")
scores(pca_cov)
scores_pca <- pca_cov %>% scores()
scores_pca
scores(pca_cov$colsum)
scores_pca$species
spp_sc <- scores_pca$species
sit_sc <- scores_pca$sites
rm(scores_pca)
spp_sc
spp_sc %>% max()
spp_sc %>% max(PC1)
spp_sc %>% max(.$PC1)
spp_sc %>% add_row(max = max(vars(PC1, PC2)))
spp_sc %>% add_row(max = max())
spp_sc %>% select(PC1) %>% filter(max())
spp_sc %>% filter(PC1 == max())
spp_sc %>% filter(PC1 == max())
spp_sc %>% group_by(PC1, PC2) %>% filter(PC1 == max())
sit_sc
summarise_each(spp_sc, funs(max(., na.rm=TRUE)))
spp_sc <- scores_pca$species %>% rownames_to_column("species")
spp_sc <- spp_sc %>% rownames_to_column("species")
spp_sc <- spp_sc %>% rownames_to_column()
spp_sc %>% arrange(desc(PC1))
spp_sc %>% class
spp_sc %>% as.tibble %>% arrange(desc(PC1))
spp_sc %>% as_data_frame() %>% arrange(desc(PC1))
spp_sc %>% as_data_frame() %>% rownames_to_column() %>% arrange(desc(PC1))
spp_sc
spp_sc %>% as_data_frame() %>% rownames_to_column()
spp_sc %>% as_data_frame()
rownames(spp_sc)
spp_names <- rownames(spp_sc)
spp_sc %>% as_data_frame() %>% add_column(species = spp_names)
spp_sc %>% as_data_frame() %>% add_column(species = spp_names) %>% arrange(desc(PC1))
spp_sc %>% arrange(desc(PC2))
spp_sc %<>% as_data_frame() %<>% add_column(species = spp_names) %>% arrange(desc(PC1))
spp_sc
spp_sc %>% arrange(desc(PC2))
pca_summary <- summary(pca_cov, display = "sp", )
pca_summary$cont$importance
pca_summary$cont$importance[,1:6]
species_scores <- scores(pca_cov, display = "species")
species_scores
species_scores <- scores(pca_cov, display = "species")[[1]]
species_scores
species_scores <- scores(pca_cov, display = "species")[[2]]
species_scores
species_scores <- scores(pca_cov, display = "species")[1]
species_scores
species_scores <- scores(pca_cov, display = "species")
species_scores
spp_names <- rownames(species_scores)
spp_names
species_scores %<>% as_data_frame() %<>% add_column(species = spp_names)
rm(spp_names)
species_scores %>% arrange(desc(PC1) %>% arrange(desc(PC2))
species_scores %>% arrange(desc(PC1)) %>% arrange(desc(PC2))
species_scores %>% arrange(desc(abs(PC1))) %>% arrange(desc(abs(PC2)))
species_scores %>% arrange(desc(abs(PC1), abs(PC2)))
biplot(pca_cov, scaling = 1, display = 'species', col = "azure4")
text(pca_cov, display = 'sites',
labels = env_df$Sand_Cover, cex = 0.7, col = as.numeric(env_df$Sand_Cover))
cont_sps <- pcacircle(pca_cov)
# Most important species:
site_scores <- scores(pca_cov, scaling = 1, display = 'wa')
sp_name <- names(cont_sps)[1]
pc1 <- ggplot(abnd_mtx) +
aes(x = abnd_mtx[,sp_name], y = site_scores[,1]) +
geom_jitter(alpha = 0.5, cex = 2) +
labs(title = "PC1", x = "Abundance", y = "PC scores")
pc2 <- ggplot(abnd_mtx) +
aes(x = abnd_mtx[,sp_name], y = site_scores[,2]) +
geom_jitter(alpha = 0.5, cex = 2) +
labs(title = "PC2", x = "Abundance", y = "PC scores")
gridExtra::grid.arrange(pc1, pc2, nrow = 1, top = sp_name)
envfit(pca_cov, env_df[, -1])
